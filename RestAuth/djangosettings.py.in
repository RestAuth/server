# This file is part of RestAuth (http://fs.fsinf.at/wiki/RestAuth).
#
# RestAuth is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# RestAuth is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with RestAuth.  If not, see <http://www.gnu.org/licenses/>.
#
###############################
### Default Django settings ###
###############################

# This file is used to set some defaults usually not interesting for someone
# who wants to use RestAuth.
SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = False

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = ()

MIDDLEWARE_CLASSES = [
    'django.middleware.common.CommonMiddleware',
    'RestAuth.common.middleware.ExceptionMiddleware',
    'RestAuth.common.middleware.LoggingMiddleware',
    'RestAuth.common.middleware.HeaderMiddleware',
]

CACHE_MIDDLEWARE_SECONDS = 300
CACHE_MIDDLEWARE_KEY_PREFIX = ''

ROOT_URLCONF = 'RestAuth.urls'

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
#    'django.contrib.sessions',
    'RestAuth.Services',
    'RestAuth.Users',
    'RestAuth.Groups',
)

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.RemoteUserBackend',
    'RestAuth.Services.backend.InternalAuthenticationBackend',
)

#############################################
### Defaults for the standard settings.py ###
#############################################
SKIP_VALIDATORS = [ 'linux', 'windows' ]
FILTER_LINUX_USERNAME_NOT_RECOMMENDED = True
MIN_USERNAME_LENGTH = 3
MAX_USERNAME_LENGTH = 255
MIN_PASSWORD_LENGTH = 6
HASH_ALGORITHM = 'sha512'
LOG_LEVEL = 'CRITICAL'
LOG_TARGET = 'stderr'

# Make this unique, and don't share it with anybody.
SECRET_KEY = '__SECRET_KEY__'

# logging-config
LOGGING = {
	'version': 1,
	'disable_existing_loggers': True,
	'formatters': {
		'verbose': {
			'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
		},
		'simple': {
			'format': '%(levelname)s %(service)s: %(message)s'
		},
		'users.user': { 
			'format': '%(levelname)s %(service)s: %(username)s: %(message)s'
		},
		'users.user.props.prop': { 
			'format': '%(levelname)s %(service)s: %(username)s: %(prop)s: %(message)s'
		},
		'groups.group' : {
			'format': '%(levelname)s %(service)s: %(group)s: %(message)s'
		},
		'groups.group.users' : {
			'format': '%(levelname)s %(service)s: %(group)s: %(message)s'
		},
		'groups.group.users.user' : {
			'format': '%(levelname)s %(service)s: %(group)s: %(user)s: %(message)s'
		},
		'groups.group.groups' : {
			'format': '%(levelname)s %(service)s: %(group)s: %(message)s'
		},
		'groups.group.groups.subgroup' : {
			'format': '%(levelname)s %(service)s: %(group)s: %(subgroup)s: %(message)s'
		},
	},
#	'filters': {
#		'special': {
#			'()': 'project.logging.SpecialFilter',
#			'foo': 'bar',
#		}
#	},
	'handlers': {
		'null': {
			'level':'DEBUG',
			'class':'django.utils.log.NullHandler',
		},
		'console':{
			'level':'DEBUG',
			'class':'logging.StreamHandler',
			'formatter': 'simple'
		},
		'users.user':{
			'level':'DEBUG',
			'class':'logging.StreamHandler',
			'formatter': 'users.user'
		},
		'users.user.props.prop':{
			'level':'DEBUG',
			'class':'logging.StreamHandler',
			'formatter': 'users.user.props.prop'
		},
		'groups.group': {
			'level':'DEBUG',
			'class':'logging.StreamHandler',
			'formatter': 'groups.group'
		},
		'groups.group.users': {
			'level':'DEBUG',
			'class':'logging.StreamHandler',
			'formatter': 'groups.group.users'
		},
		'groups.group.users.user': {
			'level':'DEBUG',
			'class':'logging.StreamHandler',
			'formatter': 'groups.group.users.user'
		},
		'groups.group.groups': {
			'level':'DEBUG',
			'class':'logging.StreamHandler',
			'formatter': 'groups.group.groups'
		},
		'groups.group.groups.subgroup': {
			'level':'DEBUG',
			'class':'logging.StreamHandler',
			'formatter': 'groups.group.groups.subgroup'
		}
	},
	'loggers': {
		'users': {
			'handlers':['console'],
			'propagate': False,
			'level':'DEBUG',
		},
		'users.user': {
			'handlers':['users.user'],
			'propagate': False,
			'level':'DEBUG',
		},
		'users.user.props': { # we have no additional info here!
			'handlers':['users.user'],
			'propagate': False,
			'level':'DEBUG',
		},
		'users.user.props.prop': {
			'handlers':['users.user.props.prop'],
			'propagate': False,
			'level':'DEBUG',
		},
		'groups': {
			'handlers':['console'],
			'propagate': False,
			'level':'DEBUG',
		},
		'groups.group': {
			'handlers':['groups.group'],
			'propagate': False,
			'level':'DEBUG',
		},
		'groups.group.users': {
			'handlers':['groups.group.users'],
			'propagate': False,
			'level':'DEBUG',
		},
		'groups.group.users.user': {
			'handlers':['groups.group.users.user'],
			'propagate': False,
			'level':'DEBUG',
		},
		'groups.group.groups': {
			'handlers':['groups.group.groups'],
			'propagate': False,
			'level':'DEBUG',
		},
		'groups.group.groups.subgroup': {
			'handlers':['groups.group.groups.subgroup'],
			'propagate': False,
			'level':'DEBUG',
		}
	}
}
